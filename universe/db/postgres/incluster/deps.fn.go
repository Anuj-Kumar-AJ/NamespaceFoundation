// This file was automatically generated by Foundation.
// DO NOT EDIT. To update, re-run `fn generate`.

package incluster

import (
	"context"
	"github.com/jackc/pgx/v4/pgxpool"
	"namespacelabs.dev/foundation/std/go/core"
	"namespacelabs.dev/foundation/universe/db/postgres/incluster/creds"
)

// Dependencies that are instantiated once for the lifetime of the extension.
type ExtensionDeps struct {
	Creds          *creds.Creds
	ReadinessCheck core.Check
}

type _checkProvideDatabase func(context.Context, *Database, ExtensionDeps) (*pgxpool.Pool, error)

var _ _checkProvideDatabase = ProvideDatabase

var (
	Package__udoubi = &core.Package{
		PackageName: "namespacelabs.dev/foundation/universe/db/postgres/incluster",
	}

	Provider__udoubi = core.Provider{
		Package:     Package__udoubi,
		Instantiate: makeDeps__udoubi,
	}
)

func makeDeps__udoubi(ctx context.Context, di core.Dependencies) (_ interface{}, err error) {
	var deps ExtensionDeps

	if err := di.Instantiate(ctx, creds.Provider__9gpcgr, func(ctx context.Context, v interface{}) (err error) {
		if deps.Creds, err = creds.ProvideCreds(ctx, nil, v.(creds.ExtensionDeps)); err != nil {
			return err
		}
		return nil
	}); err != nil {
		return nil, err
	}

	if deps.ReadinessCheck, err = core.ProvideReadinessCheck(ctx, nil); err != nil {
		return nil, err
	}

	return deps, nil
}
