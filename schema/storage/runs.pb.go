// Copyright 2022 Namespace Labs Inc; All rights reserved.
// Licensed under the EARLY ACCESS SOFTWARE LICENSE AGREEMENT
// available at http://github.com/namespacelabs/foundation

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: schema/storage/runs.proto

package storage

import (
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SectionRun_Kind int32

const (
	SectionRun_KIND_UNKNOWN SectionRun_Kind = 0
	SectionRun_BUILD        SectionRun_Kind = 1
	SectionRun_TEST         SectionRun_Kind = 2
	SectionRun_DEPLOY       SectionRun_Kind = 3
)

// Enum value maps for SectionRun_Kind.
var (
	SectionRun_Kind_name = map[int32]string{
		0: "KIND_UNKNOWN",
		1: "BUILD",
		2: "TEST",
		3: "DEPLOY",
	}
	SectionRun_Kind_value = map[string]int32{
		"KIND_UNKNOWN": 0,
		"BUILD":        1,
		"TEST":         2,
		"DEPLOY":       3,
	}
)

func (x SectionRun_Kind) Enum() *SectionRun_Kind {
	p := new(SectionRun_Kind)
	*p = x
	return p
}

func (x SectionRun_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SectionRun_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_storage_runs_proto_enumTypes[0].Descriptor()
}

func (SectionRun_Kind) Type() protoreflect.EnumType {
	return &file_schema_storage_runs_proto_enumTypes[0]
}

func (x SectionRun_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SectionRun_Kind.Descriptor instead.
func (SectionRun_Kind) EnumDescriptor() ([]byte, []int) {
	return file_schema_storage_runs_proto_rawDescGZIP(), []int{1, 0}
}

type InvocationDescription_Kind int32

const (
	InvocationDescription_KIND_UNKNOWN InvocationDescription_Kind = 0
	InvocationDescription_BUILD        InvocationDescription_Kind = 1
	InvocationDescription_TEST         InvocationDescription_Kind = 2
	InvocationDescription_DEPLOY       InvocationDescription_Kind = 3
	InvocationDescription_STARTER      InvocationDescription_Kind = 4
)

// Enum value maps for InvocationDescription_Kind.
var (
	InvocationDescription_Kind_name = map[int32]string{
		0: "KIND_UNKNOWN",
		1: "BUILD",
		2: "TEST",
		3: "DEPLOY",
		4: "STARTER",
	}
	InvocationDescription_Kind_value = map[string]int32{
		"KIND_UNKNOWN": 0,
		"BUILD":        1,
		"TEST":         2,
		"DEPLOY":       3,
		"STARTER":      4,
	}
)

func (x InvocationDescription_Kind) Enum() *InvocationDescription_Kind {
	p := new(InvocationDescription_Kind)
	*p = x
	return p
}

func (x InvocationDescription_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvocationDescription_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_storage_runs_proto_enumTypes[1].Descriptor()
}

func (InvocationDescription_Kind) Type() protoreflect.EnumType {
	return &file_schema_storage_runs_proto_enumTypes[1]
}

func (x InvocationDescription_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InvocationDescription_Kind.Descriptor instead.
func (InvocationDescription_Kind) EnumDescriptor() ([]byte, []int) {
	return file_schema_storage_runs_proto_rawDescGZIP(), []int{5, 0}
}

// Emitted by each individual run, regardless of kind and storage type.
// Next ID: 7
type UndifferentiatedRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId       string                 `protobuf:"bytes,6,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	ParentRunId string                 `protobuf:"bytes,1,opt,name=parent_run_id,json=parentRunId,proto3" json:"parent_run_id,omitempty"`
	Status      *status.Status         `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Created     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
	Completed   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=completed,proto3" json:"completed,omitempty"` // Regardless of success or failure.
	Attachment  []*anypb.Any           `protobuf:"bytes,5,rep,name=attachment,proto3" json:"attachment,omitempty"`
}

func (x *UndifferentiatedRun) Reset() {
	*x = UndifferentiatedRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_storage_runs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndifferentiatedRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndifferentiatedRun) ProtoMessage() {}

func (x *UndifferentiatedRun) ProtoReflect() protoreflect.Message {
	mi := &file_schema_storage_runs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndifferentiatedRun.ProtoReflect.Descriptor instead.
func (*UndifferentiatedRun) Descriptor() ([]byte, []int) {
	return file_schema_storage_runs_proto_rawDescGZIP(), []int{0}
}

func (x *UndifferentiatedRun) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *UndifferentiatedRun) GetParentRunId() string {
	if x != nil {
		return x.ParentRunId
	}
	return ""
}

func (x *UndifferentiatedRun) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UndifferentiatedRun) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *UndifferentiatedRun) GetCompleted() *timestamppb.Timestamp {
	if x != nil {
		return x.Completed
	}
	return nil
}

func (x *UndifferentiatedRun) GetAttachment() []*anypb.Any {
	if x != nil {
		return x.Attachment
	}
	return nil
}

// Used for permanent storage.
type SectionRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind             SectionRun_Kind                `protobuf:"varint,1,opt,name=kind,proto3,enum=foundation.schema.storage.SectionRun_Kind" json:"kind,omitempty"`
	Label            string                         `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"` // For human consumption.
	ParentRunId      string                         `protobuf:"bytes,3,opt,name=parent_run_id,json=parentRunId,proto3" json:"parent_run_id,omitempty"`
	Status           *status.Status                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Created          *timestamppb.Timestamp         `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	Completed        *timestamppb.Timestamp         `protobuf:"bytes,6,opt,name=completed,proto3" json:"completed,omitempty"`   // Regardless of success or failure.
	Attachment       []*anypb.Any                   `protobuf:"bytes,7,rep,name=attachment,proto3" json:"attachment,omitempty"` // Inline attachments.
	StoredAttachment []*SectionRun_StoredAttachment `protobuf:"bytes,8,rep,name=stored_attachment,json=storedAttachment,proto3" json:"stored_attachment,omitempty"`
}

func (x *SectionRun) Reset() {
	*x = SectionRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_storage_runs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SectionRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SectionRun) ProtoMessage() {}

func (x *SectionRun) ProtoReflect() protoreflect.Message {
	mi := &file_schema_storage_runs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SectionRun.ProtoReflect.Descriptor instead.
func (*SectionRun) Descriptor() ([]byte, []int) {
	return file_schema_storage_runs_proto_rawDescGZIP(), []int{1}
}

func (x *SectionRun) GetKind() SectionRun_Kind {
	if x != nil {
		return x.Kind
	}
	return SectionRun_KIND_UNKNOWN
}

func (x *SectionRun) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *SectionRun) GetParentRunId() string {
	if x != nil {
		return x.ParentRunId
	}
	return ""
}

func (x *SectionRun) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SectionRun) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *SectionRun) GetCompleted() *timestamppb.Timestamp {
	if x != nil {
		return x.Completed
	}
	return nil
}

func (x *SectionRun) GetAttachment() []*anypb.Any {
	if x != nil {
		return x.Attachment
	}
	return nil
}

func (x *SectionRun) GetStoredAttachment() []*SectionRun_StoredAttachment {
	if x != nil {
		return x.StoredAttachment
	}
	return nil
}

// Next ID: 11
type Run struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId       string        `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	Repository  string        `protobuf:"bytes,3,opt,name=repository,proto3" json:"repository,omitempty"`             // E.g. github.com/namespacelabs/foundation
	CommitId    string        `protobuf:"bytes,4,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"` // E.g. c0c3859
	Branch      string        `protobuf:"bytes,5,opt,name=branch,proto3" json:"branch,omitempty"`                     // E.g. main
	PullRequest string        `protobuf:"bytes,7,opt,name=pull_request,json=pullRequest,proto3" json:"pull_request,omitempty"`
	PusherLogin string        `protobuf:"bytes,8,opt,name=pusher_login,json=pusherLogin,proto3" json:"pusher_login,omitempty"` // E.g. namespace[bot]
	AuthorLogin string        `protobuf:"bytes,9,opt,name=author_login,json=authorLogin,proto3" json:"author_login,omitempty"` // E.g. hugosantos
	ModuleName  string        `protobuf:"bytes,10,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`   // E.g. namespacelabs.dev/foundation
	Attachment  []*anypb.Any  `protobuf:"bytes,11,rep,name=attachment,proto3" json:"attachment,omitempty"`                     // E.g. a GithubEvent.
	SectionRun  []*SectionRun `protobuf:"bytes,1,rep,name=section_run,json=sectionRun,proto3" json:"section_run,omitempty"`
}

func (x *Run) Reset() {
	*x = Run{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_storage_runs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Run) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Run) ProtoMessage() {}

func (x *Run) ProtoReflect() protoreflect.Message {
	mi := &file_schema_storage_runs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Run.ProtoReflect.Descriptor instead.
func (*Run) Descriptor() ([]byte, []int) {
	return file_schema_storage_runs_proto_rawDescGZIP(), []int{2}
}

func (x *Run) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *Run) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *Run) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *Run) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *Run) GetPullRequest() string {
	if x != nil {
		return x.PullRequest
	}
	return ""
}

func (x *Run) GetPusherLogin() string {
	if x != nil {
		return x.PusherLogin
	}
	return ""
}

func (x *Run) GetAuthorLogin() string {
	if x != nil {
		return x.AuthorLogin
	}
	return ""
}

func (x *Run) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *Run) GetAttachment() []*anypb.Any {
	if x != nil {
		return x.Attachment
	}
	return nil
}

func (x *Run) GetSectionRun() []*SectionRun {
	if x != nil {
		return x.SectionRun
	}
	return nil
}

// This is an attachment to a RunStorage Run.
// Next ID: 6
type NamespaceBinaryVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version      string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	GitCommit    string                 `protobuf:"bytes,2,opt,name=git_commit,json=gitCommit,proto3" json:"git_commit,omitempty"`
	BuildTimeStr string                 `protobuf:"bytes,3,opt,name=build_time_str,json=buildTimeStr,proto3" json:"build_time_str,omitempty"`
	BuildTime    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=build_time,json=buildTime,proto3" json:"build_time,omitempty"`
	Modified     bool                   `protobuf:"varint,5,opt,name=modified,proto3" json:"modified,omitempty"`
}

func (x *NamespaceBinaryVersion) Reset() {
	*x = NamespaceBinaryVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_storage_runs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceBinaryVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceBinaryVersion) ProtoMessage() {}

func (x *NamespaceBinaryVersion) ProtoReflect() protoreflect.Message {
	mi := &file_schema_storage_runs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceBinaryVersion.ProtoReflect.Descriptor instead.
func (*NamespaceBinaryVersion) Descriptor() ([]byte, []int) {
	return file_schema_storage_runs_proto_rawDescGZIP(), []int{3}
}

func (x *NamespaceBinaryVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *NamespaceBinaryVersion) GetGitCommit() string {
	if x != nil {
		return x.GitCommit
	}
	return ""
}

func (x *NamespaceBinaryVersion) GetBuildTimeStr() string {
	if x != nil {
		return x.BuildTimeStr
	}
	return ""
}

func (x *NamespaceBinaryVersion) GetBuildTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BuildTime
	}
	return nil
}

func (x *NamespaceBinaryVersion) GetModified() bool {
	if x != nil {
		return x.Modified
	}
	return false
}

// This is an attachment to a RunStorage Run.
// Next ID: 5
type RunMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository         string   `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`                                           // E.g. github.com/namespacelabs/foundation
	Branch             string   `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`                                                   // E.g. main
	CommitId           string   `protobuf:"bytes,3,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`                               // E.g. c782373xd
	ModuleName         []string `protobuf:"bytes,4,rep,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`                         // E.g. namespacelabs.dev/foundation
	PipelineName       string   `protobuf:"bytes,5,opt,name=pipeline_name,json=pipelineName,proto3" json:"pipeline_name,omitempty"`                   // E.g. autopush, preview
	NspipelinesVersion string   `protobuf:"bytes,6,opt,name=nspipelines_version,json=nspipelinesVersion,proto3" json:"nspipelines_version,omitempty"` // E.g. sha256:7f7bcef8d0dd0a1cee824a90919644e5e8013b2a1f64850378d11c709b1e2988
	AuthorLogin        string   `protobuf:"bytes,7,opt,name=author_login,json=authorLogin,proto3" json:"author_login,omitempty"`                      // E.g. n-g
}

func (x *RunMetadata) Reset() {
	*x = RunMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_storage_runs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunMetadata) ProtoMessage() {}

func (x *RunMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_schema_storage_runs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunMetadata.ProtoReflect.Descriptor instead.
func (*RunMetadata) Descriptor() ([]byte, []int) {
	return file_schema_storage_runs_proto_rawDescGZIP(), []int{4}
}

func (x *RunMetadata) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *RunMetadata) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *RunMetadata) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *RunMetadata) GetModuleName() []string {
	if x != nil {
		return x.ModuleName
	}
	return nil
}

func (x *RunMetadata) GetPipelineName() string {
	if x != nil {
		return x.PipelineName
	}
	return ""
}

func (x *RunMetadata) GetNspipelinesVersion() string {
	if x != nil {
		return x.NspipelinesVersion
	}
	return ""
}

func (x *RunMetadata) GetAuthorLogin() string {
	if x != nil {
		return x.AuthorLogin
	}
	return ""
}

// This is an attachment to a RunStorage Run.
type InvocationDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind InvocationDescription_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=foundation.schema.storage.InvocationDescription_Kind" json:"kind,omitempty"`
	// The invocation command line that can be used to reproduce the invocation.
	// It should include flags having semantic meaning (e.g. --include_servers)
	// but be free of the flags specific to the exact execution environment (e.g. --run_tools_on_kubernetes)
	CommandLine string `protobuf:"bytes,2,opt,name=command_line,json=commandLine,proto3" json:"command_line,omitempty"`
}

func (x *InvocationDescription) Reset() {
	*x = InvocationDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_storage_runs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvocationDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvocationDescription) ProtoMessage() {}

func (x *InvocationDescription) ProtoReflect() protoreflect.Message {
	mi := &file_schema_storage_runs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvocationDescription.ProtoReflect.Descriptor instead.
func (*InvocationDescription) Descriptor() ([]byte, []int) {
	return file_schema_storage_runs_proto_rawDescGZIP(), []int{5}
}

func (x *InvocationDescription) GetKind() InvocationDescription_Kind {
	if x != nil {
		return x.Kind
	}
	return InvocationDescription_KIND_UNKNOWN
}

func (x *InvocationDescription) GetCommandLine() string {
	if x != nil {
		return x.CommandLine
	}
	return ""
}

// This is an attachment to a RunStorage Run.
type GithubEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerializedJson string `protobuf:"bytes,1,opt,name=serialized_json,json=serializedJson,proto3" json:"serialized_json,omitempty"`
}

func (x *GithubEvent) Reset() {
	*x = GithubEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_storage_runs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GithubEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubEvent) ProtoMessage() {}

func (x *GithubEvent) ProtoReflect() protoreflect.Message {
	mi := &file_schema_storage_runs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubEvent.ProtoReflect.Descriptor instead.
func (*GithubEvent) Descriptor() ([]byte, []int) {
	return file_schema_storage_runs_proto_rawDescGZIP(), []int{6}
}

func (x *GithubEvent) GetSerializedJson() string {
	if x != nil {
		return x.SerializedJson
	}
	return ""
}

// Stored in google.rpc.Status.details to provide action context for errors.
type ActionTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of actions leading to the failure (leaf action first).
	Task []*StoredTask `protobuf:"bytes,1,rep,name=task,proto3" json:"task,omitempty"`
}

func (x *ActionTrace) Reset() {
	*x = ActionTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_storage_runs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionTrace) ProtoMessage() {}

func (x *ActionTrace) ProtoReflect() protoreflect.Message {
	mi := &file_schema_storage_runs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionTrace.ProtoReflect.Descriptor instead.
func (*ActionTrace) Descriptor() ([]byte, []int) {
	return file_schema_storage_runs_proto_rawDescGZIP(), []int{7}
}

func (x *ActionTrace) GetTask() []*StoredTask {
	if x != nil {
		return x.Task
	}
	return nil
}

type StackTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Frame []*StackTrace_Frame `protobuf:"bytes,1,rep,name=frame,proto3" json:"frame,omitempty"`
}

func (x *StackTrace) Reset() {
	*x = StackTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_storage_runs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackTrace) ProtoMessage() {}

func (x *StackTrace) ProtoReflect() protoreflect.Message {
	mi := &file_schema_storage_runs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackTrace.ProtoReflect.Descriptor instead.
func (*StackTrace) Descriptor() ([]byte, []int) {
	return file_schema_storage_runs_proto_rawDescGZIP(), []int{8}
}

func (x *StackTrace) GetFrame() []*StackTrace_Frame {
	if x != nil {
		return x.Frame
	}
	return nil
}

// Attachments that are too large, may end being stored individually.
type SectionRun_StoredAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeUrl        string `protobuf:"bytes,1,opt,name=type_url,json=typeUrl,proto3" json:"type_url,omitempty"`
	ImageReference string `protobuf:"bytes,2,opt,name=image_reference,json=imageReference,proto3" json:"image_reference,omitempty"` // Stored in the specified image. If unset, the same image where Run is stored.
	ImagePath      string `protobuf:"bytes,3,opt,name=image_path,json=imagePath,proto3" json:"image_path,omitempty"`                // The file path within the image that holds the contents.
}

func (x *SectionRun_StoredAttachment) Reset() {
	*x = SectionRun_StoredAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_storage_runs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SectionRun_StoredAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SectionRun_StoredAttachment) ProtoMessage() {}

func (x *SectionRun_StoredAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_schema_storage_runs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SectionRun_StoredAttachment.ProtoReflect.Descriptor instead.
func (*SectionRun_StoredAttachment) Descriptor() ([]byte, []int) {
	return file_schema_storage_runs_proto_rawDescGZIP(), []int{1, 0}
}

func (x *SectionRun_StoredAttachment) GetTypeUrl() string {
	if x != nil {
		return x.TypeUrl
	}
	return ""
}

func (x *SectionRun_StoredAttachment) GetImageReference() string {
	if x != nil {
		return x.ImageReference
	}
	return ""
}

func (x *SectionRun_StoredAttachment) GetImagePath() string {
	if x != nil {
		return x.ImagePath
	}
	return ""
}

type StackTrace_Frame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Line     int32  `protobuf:"varint,2,opt,name=line,proto3" json:"line,omitempty"`
	Symbol   string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *StackTrace_Frame) Reset() {
	*x = StackTrace_Frame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_storage_runs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackTrace_Frame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackTrace_Frame) ProtoMessage() {}

func (x *StackTrace_Frame) ProtoReflect() protoreflect.Message {
	mi := &file_schema_storage_runs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackTrace_Frame.ProtoReflect.Descriptor instead.
func (*StackTrace_Frame) Descriptor() ([]byte, []int) {
	return file_schema_storage_runs_proto_rawDescGZIP(), []int{8, 0}
}

func (x *StackTrace_Frame) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StackTrace_Frame) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *StackTrace_Frame) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

var File_schema_storage_runs_proto protoreflect.FileDescriptor

var file_schema_storage_runs_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2f, 0x72, 0x75, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x02, 0x0a, 0x13, 0x55, 0x6e, 0x64, 0x69, 0x66,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x12, 0x15,
	0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xef, 0x04, 0x0a, 0x0a,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x12, 0x3e, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x2e,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x22, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x12, 0x34, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x63, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x75, 0x0a, 0x10, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x22, 0x39, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x42, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x53, 0x54, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x10, 0x03, 0x22, 0xf9, 0x02,
	0x0a, 0x03, 0x52, 0x75, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x75, 0x73, 0x68,
	0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x46, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x52, 0x0a, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x22, 0xce, 0x01, 0x0a, 0x16, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x67, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x67, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0xfc, 0x01, 0x0a, 0x0b, 0x52,
	0x75, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x6e, 0x73, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x6e, 0x73, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x22, 0xcd, 0x01, 0x0a, 0x15, 0x49, 0x6e,
	0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x35, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e,
	0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e,
	0x65, 0x22, 0x46, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42,
	0x55, 0x49, 0x4c, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x53, 0x54, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x52, 0x10, 0x04, 0x22, 0x36, 0x0a, 0x0b, 0x47, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4a, 0x73, 0x6f,
	0x6e, 0x22, 0x48, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x12, 0x39, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0xa0, 0x01, 0x0a, 0x0a,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x1a, 0x4f, 0x0a,
	0x05, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x42, 0x2d,
	0x5a, 0x2b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6c, 0x61, 0x62, 0x73, 0x2e,
	0x64, 0x65, 0x76, 0x2f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_schema_storage_runs_proto_rawDescOnce sync.Once
	file_schema_storage_runs_proto_rawDescData = file_schema_storage_runs_proto_rawDesc
)

func file_schema_storage_runs_proto_rawDescGZIP() []byte {
	file_schema_storage_runs_proto_rawDescOnce.Do(func() {
		file_schema_storage_runs_proto_rawDescData = protoimpl.X.CompressGZIP(file_schema_storage_runs_proto_rawDescData)
	})
	return file_schema_storage_runs_proto_rawDescData
}

var file_schema_storage_runs_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_schema_storage_runs_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_schema_storage_runs_proto_goTypes = []interface{}{
	(SectionRun_Kind)(0),                // 0: foundation.schema.storage.SectionRun.Kind
	(InvocationDescription_Kind)(0),     // 1: foundation.schema.storage.InvocationDescription.Kind
	(*UndifferentiatedRun)(nil),         // 2: foundation.schema.storage.UndifferentiatedRun
	(*SectionRun)(nil),                  // 3: foundation.schema.storage.SectionRun
	(*Run)(nil),                         // 4: foundation.schema.storage.Run
	(*NamespaceBinaryVersion)(nil),      // 5: foundation.schema.storage.NamespaceBinaryVersion
	(*RunMetadata)(nil),                 // 6: foundation.schema.storage.RunMetadata
	(*InvocationDescription)(nil),       // 7: foundation.schema.storage.InvocationDescription
	(*GithubEvent)(nil),                 // 8: foundation.schema.storage.GithubEvent
	(*ActionTrace)(nil),                 // 9: foundation.schema.storage.ActionTrace
	(*StackTrace)(nil),                  // 10: foundation.schema.storage.StackTrace
	(*SectionRun_StoredAttachment)(nil), // 11: foundation.schema.storage.SectionRun.StoredAttachment
	(*StackTrace_Frame)(nil),            // 12: foundation.schema.storage.StackTrace.Frame
	(*status.Status)(nil),               // 13: google.rpc.Status
	(*timestamppb.Timestamp)(nil),       // 14: google.protobuf.Timestamp
	(*anypb.Any)(nil),                   // 15: google.protobuf.Any
	(*StoredTask)(nil),                  // 16: foundation.schema.storage.StoredTask
}
var file_schema_storage_runs_proto_depIdxs = []int32{
	13, // 0: foundation.schema.storage.UndifferentiatedRun.status:type_name -> google.rpc.Status
	14, // 1: foundation.schema.storage.UndifferentiatedRun.created:type_name -> google.protobuf.Timestamp
	14, // 2: foundation.schema.storage.UndifferentiatedRun.completed:type_name -> google.protobuf.Timestamp
	15, // 3: foundation.schema.storage.UndifferentiatedRun.attachment:type_name -> google.protobuf.Any
	0,  // 4: foundation.schema.storage.SectionRun.kind:type_name -> foundation.schema.storage.SectionRun.Kind
	13, // 5: foundation.schema.storage.SectionRun.status:type_name -> google.rpc.Status
	14, // 6: foundation.schema.storage.SectionRun.created:type_name -> google.protobuf.Timestamp
	14, // 7: foundation.schema.storage.SectionRun.completed:type_name -> google.protobuf.Timestamp
	15, // 8: foundation.schema.storage.SectionRun.attachment:type_name -> google.protobuf.Any
	11, // 9: foundation.schema.storage.SectionRun.stored_attachment:type_name -> foundation.schema.storage.SectionRun.StoredAttachment
	15, // 10: foundation.schema.storage.Run.attachment:type_name -> google.protobuf.Any
	3,  // 11: foundation.schema.storage.Run.section_run:type_name -> foundation.schema.storage.SectionRun
	14, // 12: foundation.schema.storage.NamespaceBinaryVersion.build_time:type_name -> google.protobuf.Timestamp
	1,  // 13: foundation.schema.storage.InvocationDescription.kind:type_name -> foundation.schema.storage.InvocationDescription.Kind
	16, // 14: foundation.schema.storage.ActionTrace.task:type_name -> foundation.schema.storage.StoredTask
	12, // 15: foundation.schema.storage.StackTrace.frame:type_name -> foundation.schema.storage.StackTrace.Frame
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_schema_storage_runs_proto_init() }
func file_schema_storage_runs_proto_init() {
	if File_schema_storage_runs_proto != nil {
		return
	}
	file_schema_storage_task_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_schema_storage_runs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndifferentiatedRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_storage_runs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SectionRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_storage_runs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Run); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_storage_runs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceBinaryVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_storage_runs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_storage_runs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvocationDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_storage_runs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GithubEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_storage_runs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_storage_runs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_storage_runs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SectionRun_StoredAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_storage_runs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackTrace_Frame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_schema_storage_runs_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_schema_storage_runs_proto_goTypes,
		DependencyIndexes: file_schema_storage_runs_proto_depIdxs,
		EnumInfos:         file_schema_storage_runs_proto_enumTypes,
		MessageInfos:      file_schema_storage_runs_proto_msgTypes,
	}.Build()
	File_schema_storage_runs_proto = out.File
	file_schema_storage_runs_proto_rawDesc = nil
	file_schema_storage_runs_proto_goTypes = nil
	file_schema_storage_runs_proto_depIdxs = nil
}
