// Copyright 2022 Namespace Labs Inc; All rights reserved.
// Licensed under the EARLY ACCESS SOFTWARE LICENSE AGREEMENT
// available at http://github.com/namespacelabs/foundation

syntax = "proto3";

package foundation.schema;

option go_package = "namespacelabs.dev/foundation/schema";

import "google/protobuf/any.proto";
import "schema/package.proto";

message Mount {
    string owner       = 1;  // Package that declared the mount.
    string path        = 2;
    string volume_name = 3;
    bool   readonly    = 4;
}

message Volume {
    string owner = 1;  // Package that declared the volume.

    // The type of volume.
    string kind = 2;
    // Explicit if defined at the file level, auto-generated from the mount point if inlined.
    // Volumes then referenced by the name from "mounts".
    string name = 3;

    google.protobuf.Any definition = 4;
}

message EphemeralVolume {}

message PersistentVolume {
    string id         = 1;
    uint64 size_bytes = 2;
}

message ConfigurableVolume {
    repeated Entry entries = 1;

    message Entry {
        // A single file or a directory, relative to the mount path.
        string path = 1;

        // One of.
        FileContents inline                       = 2;
        ResourceSet         inline_set            = 4;
        PackageRef          secret_ref            = 3;
        KubernetesSecretRef kubernetes_secret_ref = 5;

        message KubernetesSecretRef {
            string secret_name = 1;
            string secret_key  = 2;
        }
    }
}

message ResourceSet {
    repeated FileContents resource = 1;
}

// TODO reconcile with std.types.Resource.
message FileContents {
    string path     = 1;
    bool   utf8     = 3;  // Is the content text?
    bytes  contents = 2;
}