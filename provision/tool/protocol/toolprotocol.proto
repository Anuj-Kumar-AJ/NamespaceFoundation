// Copyright 2022 Namespace Labs Inc; All rights reserved.
// Licensed under the EARLY ACCESS SOFTWARE LICENSE AGREEMENT
// available at http://github.com/namespacelabs/foundation

syntax = "proto3";

package foundation.provision.tool.protocol;

option go_package = "namespacelabs.dev/foundation/provision/tool/protocol";

import "google/protobuf/any.proto";
import "schema/defextension.proto";
import "schema/definition.proto";
import "schema/environment.proto";
import "schema/stack.proto";
import "schema/server.proto";
import "std/types/resource.proto";

message ToolRequest {
    reserved 3;

    string   tool_package                 = 1;
    repeated google.protobuf.Any input    = 5;
    repeated Snapshot            snapshot = 9;

    // XXX deprecated, in favor of StackRelated.
    string             focused_server = 2;
    schema.Environment env            = 4;
    schema.Stack       stack          = 8;

    oneof request_type {
        ApplyRequest  apply_request  = 6;
        DeleteRequest delete_request = 7;
        InvokeRequest invoke_request = 10;
    }
}

message StackRelated {
    string             focused_server = 1;
    schema.Environment env            = 2;
    schema.Stack       stack          = 3;
}

message ToolResponse {
    ApplyResponse  apply_response  = 1;
    DeleteResponse delete_response = 2;
    InvokeResponse invoke_response = 3;
}

message ApplyRequest {
    StackRelated header = 1;
}

message ApplyResponse {
    repeated schema.DefExtension extension                       = 1;
    repeated schema.SerializedInvocation invocation              = 2;
    repeated schema.SerializedInvocationSource invocation_source = 5;
    repeated schema.ComputedConfiguration computed               = 4;
    repeated schema.ServerExtension server_extension             = 6;

    // The outcome of this tool computation is valid for as long as these
    // inputs don't change.
    repeated CacheKey cache_key = 3;
}

message DeleteRequest {
    StackRelated header = 1;
}

message DeleteResponse {
    repeated schema.SerializedInvocation invocation = 1;
}

message InvokeRequest {}

message InvokeResponse {
    foundation.std.types.Resource resource = 1;
}

message CacheKey {}

enum Lifecycle {
    LIFECYCLE_UNKNOWN = 0;
    PROVISION         = 1;
    SHUTDOWN          = 2;
}

message Snapshot {
    string             name  = 1;
    repeated FileEntry entry = 2;

    message FileEntry {
        string path     = 1;
        bytes  contents = 2;
    }
}

service InvocationService {
    rpc Invoke(ToolRequest) returns (ToolResponse);
}
