// This file was automatically generated by Foundation.
// DO NOT EDIT. To update, re-run `fn generate`.

package datastore

import (
	"context"
	"namespacelabs.dev/foundation/std/go/core"
	"namespacelabs.dev/foundation/std/secrets"
)

// Dependencies that are instantiated once for the lifetime of the extension.
type ExtensionDeps struct {
	Cert           *secrets.Value
	Gen            *secrets.Value
	Keygen         *secrets.Value
	ReadinessCheck core.Check
}

type _checkProvideDatabase func(context.Context, *Database, ExtensionDeps) (*DB, error)

var _ _checkProvideDatabase = ProvideDatabase

var (
	Package__38f4mh = &core.Package{
		PackageName: "namespacelabs.dev/foundation/std/testdata/datastore",
	}

	Provider__38f4mh = core.Provider{
		Package:     Package__38f4mh,
		Instantiate: makeDeps__38f4mh,
	}
)

func makeDeps__38f4mh(ctx context.Context, di core.Dependencies) (interface{}, error) {
	var deps ExtensionDeps
	var err error
	{ // name: "cert"
		p := &secrets.Secret{}
		core.MustUnwrapProto("CgRjZXJ0", p)

		if deps.Cert, err = secrets.ProvideSecret(ctx, p); err != nil {
			return nil, err
		}
	}

	{ // name: "gen"
		p := &secrets.Secret{}
		core.MustUnwrapProto("CgNnZW4=", p)

		if deps.Gen, err = secrets.ProvideSecret(ctx, p); err != nil {
			return nil, err
		}
	}

	{ // name: "keygen"
		p := &secrets.Secret{}
		core.MustUnwrapProto("CgZrZXlnZW4=", p)

		if deps.Keygen, err = secrets.ProvideSecret(ctx, p); err != nil {
			return nil, err
		}
	}

	{
		if deps.ReadinessCheck, err = core.ProvideReadinessCheck(ctx, nil); err != nil {
			return nil, err
		}
	}

	return deps, nil
}
